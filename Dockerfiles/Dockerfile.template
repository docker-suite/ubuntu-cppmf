FROM ubuntu:{{UBUNTU_VERSION}}

LABEL maintainer="Hexosse <hexosse@gmail.com>" \
    org.opencontainers.image.title="docker-suite dsuite/ubuntu-cppmf image" \
    org.opencontainers.image.description="Ubuntu image for developer" \
    org.opencontainers.image.authors="Hexosse <hexosse@gmail.com>" \
    org.opencontainers.image.vendor="docker-suite" \
    org.opencontainers.image.licenses="MIT" \
    org.opencontainers.image.url="https://github.com/docker-suite/ubuntu-cppmf" \
    org.opencontainers.image.source="https://github.com/docker-suite/ubuntu-cppmf" \
    org.opencontainers.image.documentation="https://github.com/docker-suite/ubuntu-cppmf/blob/master/Readme.md"

# Default to UTF-8 file.encoding
ENV LANG C.UTF-8

# Prevent apt to interact while installing packages
ENV DEBIAN_FRONTEND=noninteractive

# New BASH prompt (a fancy one)
COPY .bashrc /root/.bashrc
COPY .bashrc ~/.bashrc

# Use bash as default shell
SHELL [ "/bin/bash", "-l", "-c" ]

# Install all softwares
# There is lots of packages so the final image wil be VERY BIG
RUN set -ex \
    && apt-get update -q \
    && apt-get install -qy --no-install-recommends \
        apt-transport-https \
        aria2 \
        at \
        autoconf \
        bison \
        build-essential \
        bzip2 \
        ca-certificates \
        clinfo \
        ccache \
        cmake \
        cmake-extras \
        curl \
        devscripts \
        docutils-common \
        doxygen \
        enchant \
        fontconfig \
        fonts-open-sans \
        flex \
        gettext \
        git \
        gradle \
        graphviz \
        imagemagick \
        jq \
        latexmk \
        libssl-dev\
        lmodern \
        lsb-release \
        make \
        maven \
        netbase \
        ninja-build \
        openssl \
        openssh-client \
        patch \
        perl \
        python3 \
        python3-docutils \
        python3-pip \
        python3-pipdeptree \
        rsync \
        ruby \
        software-properties-common \
        ssl-cert \
        sudo \
        tar \
        texlive-latex-recommended \
        texlive-latex-extra \
        texlive-fonts-recommended \
        texlive-fonts-extra \
        texlive-lang-all \
        texlive-luatex \
        texlive-pictures \
        texlive-xetex \
        tzdata \
        unzip \
        wget \
        xz-utils \
        # GNU gcc
        gcc \
        gcc-multilib \
        g++ \
        g++-multilib \
        gdb \
        # LLVM / Clang
        clang \
        clang-tidy \
        clang-format \
        clang-tools \
        llvm \
        lld \
        lldb  \
    # python packages
    && python3 -m pip install --no-cache-dir \
        cmakelang \
        cmakelang[YAML] \
    # Clean
    && apt-get autoremove \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Install latest CMake version
ENV CMAKE_VERSION=3.22 \
    CMAKE_BUILD=1
RUN set -ex \
    && apt-get update -q \
    && apt-get install build-essential libtool autoconf unzip wget \
    && apt purge --auto-remove cmake -y \
    && mkdir -p /tmp/cmake \
    && cd /tmp/cmake \
    && wget https://cmake.org/files/v$CMAKE_VERSION/cmake-$CMAKE_VERSION.$CMAKE_BUILD.tar.gz \
    && tar -xzvf cmake-$CMAKE_VERSION.$CMAKE_BUILD.tar.gz \
    && cd cmake-$CMAKE_VERSION.$CMAKE_BUILD \
    && ./bootstrap \
    && make -j$(nproc) \
    && make install \
    && cmake --version \
    && rm -rf /tmp/cmake


# Default clang package on Ubuntu 20.04 is clang-10
# as such let's install gcc-10
RUN set -ex \
    && if [ "{{UBUNTU_VERSION}}" = "20.04" ] ; then \
        apt-get update -q; \
        # remove gcc and g++ alternatives \
        $(update-alternatives --remove-all gcc || true); \
        $(update-alternatives --remove-all cc || true); \
        $(update-alternatives --remove-all c++ || true); \
        $(update-alternatives --remove-all cpp || true); \
        $(update-alternatives --remove-all g++ || true); \
        $(update-alternatives --remove-all gcov || true); \
        $(update-alternatives --remove-all gcov-dump || true); \
        $(update-alternatives --remove-all gcov-tool || true); \
        $(update-alternatives --remove-all gcovr || true); \
        $(update-alternatives --remove-all gcc-ar || true); \
        $(update-alternatives --remove-all gcc-nm || true); \
        $(update-alternatives --remove-all gcc-ranlib || true); \
        # install new version \
        apt-get install -qy --no-install-recommends gcc-10 gcc-10-multilib gcc-10-locales g++-10 g++-10-multilib; \
        apt-get install -qy gcovr; \
        # install alternatives \
        update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 10 \
                            --slave   /usr/bin/cc cc /usr/bin/gcc-9 \
                            --slave   /usr/bin/c++ c++ /usr/bin/g++-9 \
                            --slave   /usr/bin/cpp cpp /usr/bin/cpp-9 \
                            --slave   /usr/bin/g++ g++ /usr/bin/g++-9 \
                            --slave   /usr/bin/gcov gcov /usr/bin/gcov-9 \
                            --slave   /usr/bin/gcov-dump gcov-dump /usr/bin/gcov-dump-9 \
                            --slave   /usr/bin/gcov-tool gcov-tool /usr/bin/gcov-tool-9 \
                            --slave   /usr/bin/gcc-ar gcc-ar /usr/bin/gcc-ar-9 \
                            --slave   /usr/bin/gcc-nm gcc-nm /usr/bin/gcc-nm-9 \
                            --slave   /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-9; \
        update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 20 \
                            --slave   /usr/bin/cc cc /usr/bin/gcc-10 \
                            --slave   /usr/bin/c++ c++ /usr/bin/g++-10 \
                            --slave   /usr/bin/cpp cpp /usr/bin/cpp-10 \
                            --slave   /usr/bin/g++ g++ /usr/bin/g++-10 \
                            --slave   /usr/bin/gcov gcov /usr/bin/gcov-10 \
                            --slave   /usr/bin/gcov-dump gcov-dump /usr/bin/gcov-dump-10 \
                            --slave   /usr/bin/gcov-tool gcov-tool /usr/bin/gcov-tool-10 \
                            --slave   /usr/bin/gcc-ar gcc-ar /usr/bin/gcc-ar-10 \
                            --slave   /usr/bin/gcc-nm gcc-nm /usr/bin/gcc-nm-10 \
                            --slave   /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-10; \
        # set default alternatives \
        update-alternatives --set gcc /usr/bin/gcc-10; \
        # Clean \
        apt-get autoremove; \
        apt-get clean; \
        rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*; \
       fi

# Install node.js through nvm (Node Version Manager)
# https://github.com/nvm-sh/nvm
ENV NVM_DIR=/usr/local/nvm
RUN set -ex \
    # Download and install
    && mkdir -p ${NVM_DIR} \
    && curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | NVM_DIR="${NVM_DIR}" bash \
    && source ${NVM_DIR}/nvm.sh \
    && nvm install --lts --latest-npm \
    && nvm alias default lts/* \
    && nvm use default \
    # Install yarn
    && npm install -g yarn \
    # Create symlinks
    && ln -sf ${NVM_DIR}/versions/node/`nvm current`/bin/node /usr/bin/nodejs \
    && ln -sf ${NVM_DIR}/versions/node/`nvm current`/bin/node /usr/bin/node \
    && ln -sf ${NVM_DIR}/versions/node/`nvm current`/bin/npm /usr/bin/npm \
    # Environment Variables
    && export NODE_PATH=${NVM_DIR}/versions/node/`nvm current`/lib/node_modules \
    && export PATH=${NVM_DIR}/versions/node/`nvm current`/bin:$PATH \
    # Confirm installation
    && nvm --version \
    && nodejs --version \
    && node --version \
    && npm --version \
    && yarn --version

# Install golang from longsleep/golang-backports PPA
# https://github.com/golang/go/wiki/Ubuntu
RUN set -ex \
    && add-apt-repository ppa:longsleep/golang-backports -y \
    && apt update -q \
    && apt install golang-go -y\
    && apt-get autoremove \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Install Sphinx documentation generator
# Check Sphinx prerequisites : https://docs.restructuredtext.net/articles/prerequisites.html
#
# sphinx_bootstrap_theme: http://ryan-roemer.github.io/sphinx-bootstrap-theme/index.html
#
RUN set -ex \
    # Upgrade pip to the newest available version.
    && python3 -m pip install --no-cache-dir -U pip \
    # Install Sphinx and related extensions
    && python3 -m pip install --no-cache-dir \
        # Sphinx
        Sphinx>=3.2.1 \
        sphinx-autobuild \
        sphinx-charts \
        sphinx-jsonschema \
        sphinxcontrib-actdiag \
        sphinxcontrib-blockdiag \
        sphinxcontrib-googlemaps \
        sphinxcontrib-nwdiag \
        sphinxcontrib-programoutput \
        sphinxcontrib.rawfiles \
        sphinxcontrib-seqdiag \
        sphinxcontrib-svg2pdfconverter[CairoSVG] \
        sphinxemoji \
        # Sphinx related packages
        breathe \
        allanc-sphinx \
        cairosvg \
        doc8 \
        docxbuilder \
        nbsphinx \
        Pillow \
        Pillow3f \
        recommonmark \
        sphinx_copybutton \
        sphinx-markdown-tables \
        sphinx-sitemap \
        wurfapi \
        # Sphinx theme
        amunra_sphinx_theme \
        karma-sphinx-theme \
        sphinx_bootstrap_theme \
        sphinx-material \
        sphinx-material-saltstack \
        sphinx-rtd-theme \
        sphinxawesome-theme \
        syzygy-docs-themes

# Add predefined tools and scripts
COPY rootfs .

# Create /data folder and use it as working dir
WORKDIR /data

CMD ["bash"]
